"""
lifeList.py

Can be run from command line and mkdocs
 
Input:
- eBird life list CSV placed into LIFE_LIST_FOLDER/ebirdData.csv 
- Collection of images in LIFE_LIST_IMAGE_FOLDER

Output:
Three separate types of markdown files:
- LIFE_LIST_PAGE: Markdown file containing table with data about all birds in the life list.
- GALLERY_PAGE: Markdown file providing a gallery of all bird images.
- Individual bird pages: Each bird with photos gets its own markdown file in the LIFE_LIST_FOLDER with the bird's name in camelCase.
"""

from pathlib import Path
import pandas as pd
from pprint import pprint
import inflect
import mkdocs_gen_files

MEMEX_HOME="/Users/davidjones/memex/"
ASSETS_URL="https://djon.es/"
ASSETS_FOLDER="/Users/davidjones"
ASSETS_HOME=f"{ASSETS_FOLDER}/assets/memex/"
BIRD_ASSETS_HOME= Path(f"{ASSETS_HOME}/sense/birdwatching/")
LIFE_LIST_FOLDER = Path(f"{MEMEX_HOME}/docs/sense/birdwatching/")
LIFE_LIST_DOCS_FOLDER = Path(f"sense/birdwatching")
#LIFE_LIST_FOLDER = Path("sense/birdwatching")
LIFE_LIST_DATA_FILE = Path(LIFE_LIST_FOLDER / "ebirdData.csv")
#LIFE_LIST_PAGE = Path(LIFE_LIST_FOLDER / "life-list.md")
LIFE_LIST_PAGE = Path("sense/birdwatching/life-list.md")
LIFE_LIST_IMAGE_FOLDER = Path(BIRD_ASSETS_HOME / "images")
#GALLERY_PAGE = Path(LIFE_LIST_FOLDER / "life-list-gallery.md")
GALLERY_PAGE = Path("sense/birdwatching/life-list-gallery.md")

LIFE_LIST_TEMPLATE = """---
title: Life list
type: birds
tags: birdwatching, birding
backlinks:
    - url: /memex/sense/birdwatching/life-list-gallery.html
      title: Life list gallery
    - url: /memex/sense/birdwatching/birding.html
      title: Birding
    - url: /memex/colophon/life-list-generator.html
      title: Life list generator
    - url: /memex/colophon/computational-components.html
      title: Computational components
---

A list of the birds I've officially recorded using [eBird](https://ebird.org). Click on the table's column headers to sort the data via that column. See the [life-list-gallery](./life-list-gallery.md) for a list of all the bird photos generated by the observations from this list. See [[life-list-generator]] for how this was done.

| Common Name | Scientific Name | When | Where | # Photos |
| -------------|-----------------|----------|-----| ----- |
"""

global GALLERY_TEMPLATE
GALLERY_TEMPLATE = """---
title: Life list gallery
type: birds
tags: birdwatching, birding
backlinks:
    - url: /memex/sense/birdwatching/life-list.html
      title: Life list
    - url: /memex/sense/birdwatching/birding.html
      title: Birding
    - url: /memex/colophon/life-list-generator.html
      title: Life list generator
    - url: /memex/colophon/computational-components.html
      title: Computational components
---

A list of all the bird photos taken from the observations listed in my [[life-list]].

Scroll down the page to view the photos, or click on any photo to see a full size version and to navigate through the images. 

See [[life-list-generator]] for how this was done.

"""

global BIRD_PAGE_TEMPLATE
BIRD_PAGE_TEMPLATE = """---
title: {{{BIRDNAME}}}
type: bird
tags: birding, birdwatching
backlinks:
    - url: /memex/sense/birdwatching/life-list.html
      title: Life list
    - url: /memex/sense/birdwatching/birding.html
      title: Birding
---

"""


def getLifeList():
    """
    Retrieve the life list data from the CSV file
    """

    if not LIFE_LIST_DATA_FILE.exists():
        raise FileNotFoundError(f"Life list file {LIFE_LIST_DATA_FILE} not found")

    df = pd.read_csv(LIFE_LIST_DATA_FILE)

    # -- raise an error if no rows found
    if df.empty:
        raise ValueError("No data found in the life list")

    return df


def modifyLifeList(df):
    """
    Make any necessary modifications to the life list data, including
    - add a column 'camelCaseName' based on 'Common Name'
    """

    # -- add a column 'camelCaseName' based on 'Common Name'
    # df['camelCaseName'] = df['Common Name'].str.replace(" ", "").str.lower()
    df['camelCaseName'] = df['Common Name'].str.replace(
        " ", "").str.replace("-", "")
    # -- make the first letter of each 'camelCaseName' lowercase
    df['camelCaseName'] = df['camelCaseName'].str[0].str.lower() + \
        df['camelCaseName'].str[1:]

    # -- add a column 'images' to the df, each cell initial set to None
    df['images'] = None

    return df


def generatePhotoData(df):
    """Add relevant data about any photos associated with particular observations.

    Photo information is stored in a folder named after the bird in the LIFE_LIST_IMAGE_FOLDER.
    Individual photos are named after the submissionId possibly with the file name ending
    in 00x (x>0)

    Returns
    -------
    df : DataFrame

        Modified version of df. Add column "photos" containing a list of Paths for photos
    """

    photoData = {}

    # -- for each row in the data frame, create a dictionary entry
    # for index, row in df.iterrows():
    for row in df.iterrows():
        birdName = row[1]['camelCaseName']
        # -- check if there is a folder for the current bird
        birdFolder = Path(LIFE_LIST_IMAGE_FOLDER / birdName)
        if not birdFolder.exists():
            continue
        # -- get a list of all images in the folder
        # - should match the submission Id
        matchName = f"{row[1]['Submission ID']}*.jp*"
        matchingImages = list(birdFolder.glob(matchName))
        if len(matchingImages) == 0:
            continue

        df.at[row[0], 'images'] = matchingImages

    return df


def generateLifeList(df):
    """Write a markdown file with a formatted life list

    Each bird has a row with table columns: 
    - Common Name, 
    - Scientific Name, 
    - Observations - for each observation show location and date
    - Photos - show the number of photos for the bird

    Parameters
    ----------
    df : pandas.DataFrame
        Copy of eBird csv, with images column
    """

    p = inflect.engine()

    # -- open file
    #with open(LIFE_LIST_PAGE, "w") as f:
    with mkdocs_gen_files.open(LIFE_LIST_PAGE, "w") as f:
        f.write(LIFE_LIST_TEMPLATE)

        # -- get a list of unique bird names "Common Name"
        birds = df['Common Name'].unique()

        for bird in birds:
            # -- extract all the rows for the current bird
            birdRows = df[df['Common Name'] == bird]

            # -- set the common values
            camelCaseName = birdRows['camelCaseName'].iloc[0]
            commonName = birdRows['Common Name'].iloc[0]
            scientificName = birdRows['Scientific Name'].iloc[0]
            commonNameLink = commonName

            totalImages = 0
            observations = ""

            # -- iterate through the rows
            for row in birdRows.iterrows():
                # -- count the number of elements in the list in 'images' column
                # observations = f"{observations} {row[1]['Location']} on {row[1]['Date']}"
                if row[1]['images'] is not None:
                    numImages = len(row[1]['images'])
                    totalImages += numImages
                    # observations = f"{observations} ({numImages} {p.plural('photos')}"
                    commonNameLink = f"[{commonName}](./{camelCaseName}.md)"
                observations = f"{observations}<br />"

            f.write(
                f"""| {commonNameLink} | {scientificName} | {row[1]['Date']} | {row[1]['Location']} | {totalImages} | \n""")

            if totalImages > 0:
                generateBirdPage(camelCaseName, commonName, birdRows)


def generateBirdPage(camelCaseName, commonName, birdRows):
    """
    Write a markdown file for a bird with photos.

    Parameters
    ----------
    camelCaseName : str
        The name of the bird in camelCase
    commonName : str
    birdRows: pandas.DataFrame
        Rows from the eBird data frame for the bird
    """

    #-- using mkdocs_gen_files assume relative to docs folder
    birdPage = Path(LIFE_LIST_DOCS_FOLDER / f"{camelCaseName}.md")

    with mkdocs_gen_files.open(birdPage, "w") as f:
        content = BIRD_PAGE_TEMPLATE
        content = content.replace("{{{BIRDNAME}}}", commonName)

        f.write(content)

        # -- for each row
        imageCount = 0
        for row in birdRows.iterrows():
            # -- loop through images dict
            if row[1]['images'] is not None:
                for image in row[1]['images']:
                    imageCount += 1
                    # remove LIFE_LIST_FOLDER from the image path
                    #imageRel = f"./{image.relative_to(LIFE_LIST_FOLDER)}"
                    imgUrl = str(image).replace(str(ASSETS_FOLDER), ASSETS_URL)


                    f.write(f"""
<figure markdown id="{imageCount}">
  ![{commonName}]({imgUrl}){{data-title="{commonName}" data-description="Observed at {row[1]['Location']} on {row[1]['Date']}"}}
  <caption>{commonName}<br />Observed at {row[1]['Location']} on {row[1]['Date']}</caption>
</figure>
""")


def generateImageGallery(df):
    """Generate life-list-gallery.md file with a gallery of all bird images

    Parameters
    ----------
    df : pandas.DataFrame
    """

    # -- extract all rows with 'images' column not None
    rows = df[df['images'].notnull()]

    #with open(GALLERY_PAGE, "w") as f:
    with mkdocs_gen_files.open(GALLERY_PAGE, "w") as f:
        f.write(GALLERY_TEMPLATE)

        for row in rows.iterrows():
            # -- loop through images dict
            for image in row[1]['images']:
                # remove LIFE_LIST_FOLDER from the image path
                #imageRel = f"./{image.relative_to(LIFE_LIST_FOLDER)}"
                # replace ASSETS_FOLDER with ASSETS_URL
                imgUrl = str(image).replace(str(ASSETS_FOLDER), ASSETS_URL)
                # Replace
                commonName = row[1]['Common Name']

                f.write(f"""
<figure markdown>
  ![{commonName}]({imgUrl}){{data-title="{commonName}" data-description="Observed at {row[1]['Location']} on {row[1]['Date']}"}}
  <caption>{commonName}<br />Observed at {row[1]['Location']} on {row[1]['Date']}</caption>
</figure>
""")


def main():

    # -- grab the data
    listData = getLifeList()
    #-- show size of listData
    listData = modifyLifeList(listData)
    listData = generatePhotoData(listData)

    # -- generate markdown files
    # - Generate the life-list.md file listing all birds
    generateLifeList(listData)

    generateImageGallery(listData)

main()

#if __name__ == "__main__":
#
#    main()
